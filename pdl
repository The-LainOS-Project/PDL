#!/usr/bin/bash

# LainOS Orginal Program 227865 2022
# This Project Writed for help you to Install Other Porgrams
# Writer : Aired
# ---- For LainOS Teame ----

VERSION="0.1"
NAME="LainOS LPD Package Downloader"
OS='LainOS'
IFS=';'

function select_option {

    ESC=$( printf "\033")
    cursor_blink_on()  { printf "$ESC[?25h"; }
    cursor_blink_off() { printf "$ESC[?25l"; }
    cursor_to()        { printf "$ESC[$1;${2:-1}H"; }
    print_option()     { printf "$1 "; }
    print_selected()   { printf "$ESC[7m$1 $ESC[27m"; }
    get_cursor_row()   { IFS=';' read -sdR -p $'\E[6n' ROW COL; echo ${ROW#*[}; }
    key_input()        { read -s -n3 key 2>/dev/null >&2
                         if [[ $key = $ESC[A ]]; then echo up;    fi
                         if [[ $key = $ESC[B ]]; then echo down;  fi
                         if [[ $key = ""     ]]; then echo enter; fi; }

    for opt; do printf "\n"; done

    local lastrow=`get_cursor_row`
    local startrow=$(($lastrow - $#))

    trap "cursor_blink_on; stty echo; printf '\n'; exit" 2
    cursor_blink_off

    local selected=0
    while true; do
        local idx=0
        for opt; do
            cursor_to $(($startrow + $idx))
            if [ $idx -eq $selected ]; then
                print_selected "$opt"
            else
                print_option "$opt"
            fi
            ((idx++))
        done

        case `key_input` in
            enter) break;;
            up)    ((selected--));
                   if [ $selected -lt 0 ]; then selected=$(($# - 1)); fi;;
            down)  ((selected++));
                   if [ $selected -ge $# ]; then selected=0; fi;;
        esac
    done

    cursor_to $lastrow
    printf "\n"
    cursor_blink_on

    return $selected
}

function select_opt {
    select_option "$@" 1>&2
    local result=$?
    echo $result
    return $result
}

function fileType()
{
	name=$1
	len=${#name}
	type=${name:$((len - 3))}
	if [[ $type == "pdl" ]]; then
		return 0
	else
		return 1
	fi
}

function patch_adder()
{
	if [ -f "$(pwd)/$1" ]; then
		path=$1
	else
		if [ -f "$(pwd)/PDLP/$1" ]; then
			path="PDLP/$1"
		else
			echo "your file is not found !"
			return 0;
		fi
	fi	
	file_name=$(cat $path | grep "name" | tr " " " ")
	file_name_org=${file_name:7}
	
	code=$(cat $path | sed '/^[[:space:]]*$/d')
	mapfile -t data <<< "$code"
	for ((i = 2; i < ${#data}; i++))
	{
		if [[ ${data[$i]} != "" ]]; then
			if fileType ${data[$i]}; then
				org+="${data[$i]};"
			fi
		fi
	}
	sqlite3 mainsb "insert into cus_prg values ('$file_name_org', 'This is new Program for new mode in PDL', '$org');"
	# echo "[!] Your patch in add ."
	org=""
}

cust=()
$selc;
$pck_name;
$str;
echo "LainOS PRGD - V0.1"

function pe() {
    dpkg -s "$1" &> /dev/null
    return $?
}

function help()
{
	echo "-- LainOS Package Downloader LainOS (PDL) Version 1.2 --"
	echo
	echo "Description :"
	echo "	This tool, help you to download and install packages that you can see in APT-REP or GIT-REP"
	echo "  	We use Save installer commands into a database and you can install all packages with one click"
	echo "	You should have GIT for download from github"
	if pe "git"; then
		echo "	Git is avalaible : yes"
	else
		echo "	Git is Avalaible : no"
	fi
	echo
	echo "-------------"
	echo "	Arguments :"
	echo "-h/--help  Help command"
	echo "-p         	  add patch file to PDL"
	echo "-n         	  install normall level programs"
	echo "-c         	  install compile level programs"
	echo "-i         	  install custome programs"
	echo "-u/--update       Update patch files from git repository"
	echo "-r		  Remove Item from custom list"
} 

function comp_inst()
{
	data=($(sqlite3 mainsb 'select name from comp_prg'))
	mapfile -t arr7 <<< "$data"
	for ((i = 0; i < ${#arr7[@]}; i++))
	{
		if pe ${arr7[$i]}; then
			echo "[!] You have ${arr7[$i]} Package !"
		else
			eval "sudo apt install ${arr7[$i]}"
		fi
	}
}

function norm_inst()
{
	data2=($(sqlite3 mainsb 'select name from norm_prg'))
	mapfile -t arr5 <<< "$data2"
	for ((i = 0; i < ${#arr5[@]}; i++))
	{
		if pe ${arr5[$i]}; then
			echo "[!] You have ${arr5[$i]} Package !"
		else
			eval "sudo apt install ${arr5[$i]}"
		fi
	}

}


function custom()
{
	data_name=($(sqlite3 mainsb "select name from cus_prg"))
	mapfile -t dnc <<< "$data_name"
	for ((o = 0; o < ${#dnc[@]}; o++))
	do
		if [[ ${dnc[$o]} == $1 ]]; then
			data_code=$(sqlite3 mainsb "select code from cus_prg where name='$1'")
			read -a str <<< "$data_code"
			break
		fi
	done
	for ((i = 0; i < ${#str[@]}; i++))
	do
		echo "[!] Do ${str[$i]}"
		eval ${str[$i]}
	done
}

function GetCount(){
	norm_count=($(sqlite3 mainsb "select name from norm_prg"))
	comp_count=($(sqlite3 mainsb "select name from comp_prg"))
	cus_count=($(sqlite3 mainsb "select name from cus_prg"))
	mapfile -t ncc <<< "$norm_count"		
	mapfile -t ccc <<< "$comp_count"
	mapfile -t cucc <<< "$cus_count"
}
GetCount


function net()
{
	if pe "git"; then
		echo
	else
		echo "you don't have git, first you should install git ..."
		return 0;
	fi

	git clone "https://github.com/ashk123/PDLP.git"
	file=$(ls PDLP)
	mapfile -t files <<< "$file"
	for ((a = 0; a < ${#files[@]}; a++))
	do
		patch_adder ${files[$a]}
		echo "[+] Patch ${files[$a]} Install"
	done
	rm -rf PDLP
	
}

function custom_menu()
{
	echo "you have these option : ";
	echo ""
	custs=()
	cust_names=($(sqlite3 mainsb "select name from cus_prg"))
	mapfile -t arr3 <<< "$cust_names"
	for ((i3 = 0; i3 < ${#arr3[@]}; i3++))
	do
		echo "$((i3 + 1)) - ${arr3[$i3]}"
		custs+=(${arr3[$i3]})
	done
	echo ""
	read -p "Package Name: " pck_name
	num=$((pck_name - 1))
	custom ${custs[num]}
}

function prg_list()
{
	data_name=($(sqlite3 mainsb "select name from cus_prg"))
	mapfile -t prg_names <<< "$data_name"
	for ((a = 0; a < ${#prg_names[@]}; a++))
	{
		echo "$((a + 1)) - ${prg_names[$a]}"
	}
	data_name=($(sqlite3 mainsb "select name from norm_prg"))
	mapfile -t norm_names <<< "$data_name"
	for ((b = 0; b < ${#norm_names[@]}; b++))
	{
		echo "$((a + 1)) - ${norm_names[$b]}"
		a=$a+1
	}
	data_name=($(sqlite3 mainsb "select name from comp_prg"))
	mapfile -t comp_names <<< "$data_name"
	for ((c = 0; c < ${#comp_names[@]}; c++))
	{
		echo "$((a + 1)) - ${comp_names[$c]}"
		a=$a+1
	}
	echo
	echo "Total: $((a))"
}

function cus_remove()
{
	# Sql-Injection Zone - we should check value or better way use regex
	sqlite3 mainsb "delete from cus_prg where name = '$1'"
	echo "[+] Package $1 is remove from custome packages"
}

if [ -z "$*" ] || [ $1 == "-s" ]; then
	echo ""
	echo "1. Normall installation ${#ncc[@]}"
	echo "2. Compilers ${#ccc[@]}"
	echo "3. Customize ${#cucc[@]}"
	echo "LainOS Package Downloader V-0.2"

	while [ true ]
	do
		read -p ": " selc

		if [[ $selc == "1" ]]; then
			norm_inst;
		elif [[ $selc == "2" ]]; then
			comp_inst;
		elif [[ $selc == "3" ]]; then
			echo "you have these option : ";
			echo ""
			custs=()
			cust_names=($(sqlite3 mainsb "select name from cus_prg"))
			mapfile -t arr3 <<< "$cust_names"
			for ((i3 = 0; i3 < ${#arr3[@]}; i3++))
			do
				echo "$((i3 + 1)) - ${arr3[$i3]}"
				custs+=(${arr3[$i3]})
			done
			echo ""
			read -p "Package Name: " pck_name
			num=$((pck_name - 1))
			custom ${custs[num]}
			
			
		elif [[ $selc == "list 1" ]]; then
			echo "-- Normall installation Packages --"
			echo ""
			data=($(sqlite3 mainsb 'select name from norm_prg'))
			mapfile -t arr2 <<< "$data"
			for ((i4 = 0; i4 < ${#arr2[@]}; i4++))
			do
				echo "[+] Package ${arr2[$i4]}"
			done
		elif [[ $selc == "list 2" ]]; then
			echo "-- Compilers installation Packages --"
			data2=($(sqlite3 mainsb 'select name from comp_prg'))
			mapfile -t arr <<< "$data2"
			for ((i2 = 0; i2 < ${#arr[@]}; i2++))
			do
				echo "[+] Package ${arr[$i2]}"
			done
		elif [[ $selc == "exit" ]]; then
			break
		elif [ $selc == "list" ]; then
			norm_count=($(sqlite3 mainsb "select name from norm_prg"))
			comp_count=($(sqlite3 mainsb "select name from comp_prg"))
			cus_count=($(sqlite3 mainsb "select name from cus_prg"))
			GetCount
			echo ""
			echo "1. Normall installation ${#ncc[@]}"
			echo "2. Compilers ${#ccc[@]}"
			echo "3. Customize ${#cucc[@]}"
		elif [ $selc == "version" ]; then
			echo $VERSION
		elif [ $selc == "os" ]; then
			echo $OS
		else
			echo "Please Choos a correct item."
		fi
	done
	
elif  [ $1 == "-m" ]; then
	options=("1. Normall installation ${#ncc[@]}" "2. Compilers ${#ccc[@]}" "3. Customize ${#cucc[@]}")
	case `select_opt "${options[@]}"` in
	    0) norm_inst;;
	    1) comp_inst;;
	    2) custom_menu;;
	esac
elif [ $1 == "--help" ] || [ $1 == "-h" ]; then
	help
elif [ $1 == "-p" ]; then
	patch_adder $2
elif [ $1 == "-u" ] || [ $1 == "--update" ]; then
	net
elif [ $1 == "-n" ]; then
	norm_inst
elif [ $1 == "-c" ]; then
	comp_inst
elif [ $1 == "-i" ]; then
	custom $2
elif [ $1 == "-l" ]; then
	prg_list
elif [ $1 == "-r" ]; then
	cus_remove $2
else
	echo "This command is not found !, try ./main --help"
fi
